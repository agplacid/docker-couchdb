apiVersion: v1
kind: Secret
metadata:
  name: couchdb
  labels:
    app: couchdb
    test: 'true'
    environment: testing
type: Opaque
data:
  user: Y29sbGFib3JhdGU=
  pass: RVZCNklCQVhWMTlUWEtlQWZ4dWRUQkk0RVk3dzljaWk=
---
apiVersion: v1
kind: Secret
metadata:
  name: erlang
  labels:
    app: couchdb
    test: 'true'
    environment: testing
type: Opaque
data:
  cookie: WlgyZVA4Umo4cnVmUjVJbjNnWGV1akhYNllseEREbnRyd3ZROE5kcGd3OXFOQjZ5UFhPUWhxNFF4bEc0WnZaQQ==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: couchdb
  labels:
    app: couchdb
    test: 'true'
    environment: testing
data:
  erlang.hostname: long
  couchdb.log.level: warn
  couchdb.shards: '4'
  couchdb.replicas: '3'
  couchdb.read-quorum: '1'
  couchdb.write-quorum: '2'
  couchdiscover.log.level: info
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: couchdb-templates
  labels:
    app: couchdb
    test: 'true'
    environment: testing
data:
  local.ini.j2: |
    ---
    target: /config/local.ini
    ---
    {% set config_map = env.get('CONFIG_MAP', 'couchdb') %}
    {% set config = kube.get('configmap', config_map).data -%}
    
    [couchdb]
    database_dir = {{ config.get('couchdb.data-dir', '/volumes/couchdb/data') }}
    view_index_dir = {{ config.get('couchdb.data-dir', '/volumes/couchdb/data/index') }}
    
    [chttpd]
    require_valid_user = false
    port = {{ config.get('couchdb.port', '5984') }}
    bind_address = 0.0.0.0
    
    [httpd]
    require_valid_user = false
    port = {{ config.get('couchdb.port', '5986') }}
    bind_address = 0.0.0.0
    
    [cluster]
    q = {{ config.get('couchdb.shards', '3') }}
    n = {{ config.get('couchdb.replicas', '2') }}
    r = {{ config.get('couchdb.read-quorum', '1') }}
    w = {{ config.get('couchdb.write-quorum', '1') }}
    
    [couch_httpd_auth]
    iterations = 1000
    
    [log]
    level = {{ config.get('couchdb.log.level', 'info').lower() }}

  vm.args.j2: |
    ---
    target: /config/vm.args
    ---
    {% set config_map = env.get('CONFIG_MAP', 'couchdb') %}
    {% set config = kube.get('configmap', config_map).data -%}
    
    -sasl sasl_error_logger false
    
    {% if config.get('erlang.hostname') == 'long' %}
    -name couchdb
    {% else %}
    -sname couchdb
    {% endif %}
    
    +K true
    
    +P {{ env.get('ERLANG_PROCESSES', 2048) }}
    
    +A {{ env.get('ERLANG_THREADS', 32) }}
    
    -kernel error_logger silent
    
    -kernel inet_dist_listen_min 11500 inet_dist_listen_max 11999
    
    +Bd -noinput
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: couchdb-healthz
data:
  liveness.yaml: |
    http:
      http://localhost:5984/_up/:
        status: 200
        allow-insecure: false
        no-follow-redirects: false
        timeout: 5000
        body:
        - '{"status":"ok"}'
  readiness.yaml: |
    http:
      http://localhost:5984/_up/:
        status: 200
        allow-insecure: false
        no-follow-redirects: false
        timeout: 5000
        body:
        - '{"status":"ok"}'
---
kind: Service
apiVersion: v1
metadata:
  name: couchdb
  labels:
    app: couchdb
    test: 'true'
    environment: testing
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: 'true'
spec:
  clusterIP: None
  selector:
    app: couchdb
  ports:
  - name: data
    port: 5984
  - name: admin
    port: 5986
---
apiVersion: v1
kind: Service
metadata:
  name: couchdb-lb
  labels:
    app: couchdb
    test: 'true'
    environment: testing
spec:
  selector:
    app: couchdb
  ports:
  - name: data
    port: 5984
  - name: admin
    port: 5986
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: couchdb
  labels:
    app: couchdb
    test: 'true'
    environment: testing
spec:
  serviceName: couchdb
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  minReadySeconds: 5
  template:
    metadata:
      labels:
        app: couchdb
        test: 'true'
        environment: testing
    spec:
      terminationGracePeriodSeconds: 0
      initContainers:
      - name: config
        image: telephoneorg/tmpld
        imagePullPolicy: IfNotPresent
        args:
        - tmpld /templates/*.j2
        volumeMounts:
        - name: templates
          mountPath: /templates
        - name: config
          mountPath: /config
      containers:
      - name: couchdb
        image: telephoneorg/couchdb:v2.1.1
        imagePullPolicy: IfNotPresent
        env:
        - name: ERLANG_HOSTNAME
          valueFrom:
            configMapKeyRef:
              name: couchdb
              key: erlang.hostname
        - name: COUCHDB_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: couchdb
              key: user
        - name: COUCHDB_ADMIN_PASS
          valueFrom:
            secretKeyRef:
              name: couchdb
              key: pass
        - name: ERLANG_COOKIE
          valueFrom:
            secretKeyRef:
              name: erlang
              key: cookie
        ports:
        - name: data
          containerPort: 5984
        - name: admin
          containerPort: 5986
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 5
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 5
      - name: healthz-ready
        image: telephoneorg/goss
        imagePullPolicy: IfNotPresent
        command:
        - healthz
        ports:
        - name: healthz-ready
          containerPort: 8080
        volumeMounts:
        - name: healthz
          mountPath: /goss
      - name: healthz-live
        image: telephoneorg/goss
        imagePullPolicy: IfNotPresent
        command:
        - healthz
        - liveness
        ports:
        - name: healthz-live
          containerPort: 8081
        volumeMounts:
        - name: healthz
          mountPath: /goss
      - name: couchdiscover
        image: telephoneorg/couchdiscover
        imagePullPolicy: IfNotPresent
        env:
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: couchdb
              key: couchdiscover.log.level
      volumes:
      - name: templates
        configMap:
          name: couchdb-templates
      - name: config
        emptyDir: {}
      - name: healthz
        configMap:
          name: couchdb-healthz
      restartPolicy: Always
