# create creds:          kubectl create secret generic couchdb-creds --from-literal=couchdb.user=$(sed $(perl -e "print int rand(99999)")"q;d" /usr/share/dict/words) --from-literal=couchdb.pass=$(LC_ALL=C tr -cd '[:alnum:]' < /dev/urandom | head -c 32)
# create erlang cookie:  kubectl create secret generic erlang-cookie --from-literal=erlang.cookie=$(LC_ALL=C tr -cd '[:alnum:]' < /dev/urandom | head -c 64)

apiVersion: v1
kind: Secret
metadata:
  name: couchdb-creds
  labels:
    app: couchdb
    test: 'true'
    environment: testing
type: Opaque
data:
  couchdb.pass: RVZCNklCQVhWMTlUWEtlQWZ4dWRUQkk0RVk3dzljaWk=
  couchdb.user: Y29sbGFib3JhdGU=
---
apiVersion: v1
kind: Secret
metadata:
  name: erlang-cookie
  labels:
    app: couchdb
    test: 'true'
    environment: testing
type: Opaque
data:
  erlang.cookie: WlgyZVA4Umo4cnVmUjVJbjNnWGV1akhYNllseEREbnRyd3ZROE5kcGd3OXFOQjZ5UFhPUWhxNFF4bEc0WnZaQQ==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: couchdb-templates
  labels:
    app: couchdb
    test: 'true'
    environment: testing
data:
  local.ini.j2: |
    ---
    target: /config/local.ini
    ---
    {% set config_map = env.get('CONFIG_MAP', 'couchdb') %}
    {% set config = kube.get('configmap', config_map).data -%}

    [couchdb]
    database_dir = {{ config.get('couchdb.data-dir', '/volumes/couchdb/data') }}
    view_index_dir = {{ config.get('couchdb.data-dir', '/volumes/couchdb/data') }}

    [chttpd]
    require_valid_user = {{ config.get('couchdb.require-valid-user', 'true') }}
    port = {{ config.get('couchdb.port', '5984') }}
    bind_address = 0.0.0.0

    [httpd]
    require_valid_user = {{ config.get('couchdb.require-valid-user', 'true') }}
    port = {{ config.get('couchdb.port', '5986') }}
    bind_address = 0.0.0.0

    [cluster]
    q={{ config.get('couchdb.shards', '2') }}
    n={{ config.get('couchdb.replicas', '1') }}
    r={{ config.get('couchdb.read-quorum', '1') }}
    w={{ config.get('couchdb.write-quorum', '1') }}

    [couch_httpd_auth]
    iterations = 1000

    [log]
    level = {{ config.get('couchdb.log.level', 'info').lower() }}
  vm.args.j2: |
    ---
    target: /config/vm.args
    ---
    {% set config_map = env.get('CONFIG_MAP', 'couchdb') %}
    {% set config = kube.get('configmap', config_map).data -%}

    # Turn off the sasl error logger
    -sasl sasl_error_logger false

    # Use the following erlang hostname
    {% if config.get('kube.hostname') == 'long' %}
    -name couchdb
    {% else %}
    -sname couchdb
    {% endif %}

    # Use kernel poll functionality if supported by emulator
    +K true

    # Start a pool of asynchronous IO threads
    +A {{ config.get('erlang.threads', '25') }}

    # Turn off the kernel error_logger
    -kernel error_logger silent

    # Set erlang distribution to use 11500-11999 ports instead of random
    # predictibility has value here
    -kernel inet_dist_listen_min 11500 inet_dist_listen_max 11999

    # Comment this line out if you want the Erlang shell
    +Bd -noinput
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: couchdb
  labels:
    app: couchdb
    test: 'true'
    environment: testing
data:
  kube.hostname: long
  erlang.threads: '25'
  couchdb.log.level: info
  couchdb.require-valid-user: 'false'
  couchdb.shards: '4'
  couchdb.replicas: '3'
  couchdb.read-quorum: '1'
  couchdb.write-quorum: '2'
  couchdiscover.log.level: info
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: couchdb-healthz
data:
  liveness.yaml: |
    http:
      http://localhost:5984/_up/:
        status: 200
        allow-insecure: false
        no-follow-redirects: false
        timeout: 5000
        body:
        - '{"status":"ok"}'
  readiness.yaml: |
    http:
      http://localhost:5984/_up/:
        status: 200
        allow-insecure: false
        no-follow-redirects: false
        timeout: 5000
        body:
        - '{"status":"ok"}'
---
kind: Service
apiVersion: v1
metadata:
  name: couchdb
  labels:
    app: couchdb
    test: 'true'
    environment: testing
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: 'true'
spec:
  clusterIP: None
  selector:
    app: couchdb
  ports:
  - name: data
    port: 5984
  - name: admin
    port: 5986
---
apiVersion: v1
kind: Service
metadata:
  name: couchdb-lb
  labels:
    app: couchdb
    test: 'true'
    environment: testing
spec:
  selector:
    app: couchdb
  ports:
  - name: data
    port: 5984
  - name: admin
    port: 5986
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: couchdb
  labels:
    app: couchdb
    test: 'true'
    environment: testing
spec:
  serviceName: couchdb
  replicas: 2
  template:
    metadata:
      labels:
        app: couchdb
        test: 'true'
        environment: testing
    spec:
      terminationGracePeriodSeconds: 0
      initContainers:
      - name: config
        image: telephoneorg/tmpld
        args:
        - tmpld /templates/*.j2
        volumeMounts:
        - name: templates
          mountPath: /templates
        - name: config
          mountPath: /config
      containers:
      - name: couchdb
        image: telephoneorg/couchdb:latest
        env:
        - name: USE_LONG_HOSTNAME
          value: 'true'
        - name: COUCHDB_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: couchdb-creds
              key: couchdb.user
        - name: COUCHDB_ADMIN_PASS
          valueFrom:
            secretKeyRef:
              name: couchdb-creds
              key: couchdb.pass
        - name: ERLANG_COOKIE
          valueFrom:
            secretKeyRef:
              name: erlang-cookie
              key: erlang.cookie
        ports:
        - name: data
          containerPort: 5984
        - name: admin
          containerPort: 5986
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 5
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 5
      - name: healthz-ready
        image: telephoneorg/goss
        imagePullPolicy: IfNotPresent
        command:
        - healthz
        ports:
        - name: healthz-ready
          containerPort: 8080
        volumeMounts:
        - name: healthz
          mountPath: /goss
      - name: healthz-live
        image: telephoneorg/goss
        imagePullPolicy: IfNotPresent
        command:
        - healthz
        - liveness
        ports:
        - name: healthz-live
          containerPort: 8081
        volumeMounts:
        - name: healthz
          mountPath: /goss
      - name: couchdiscover
        image: telephoneorg/couchdiscover
        imagePullPolicy: IfNotPresent
        env:
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: couchdb
              key: couchdiscover.log.level
      volumes:
      - name: templates
        configMap:
          name: couchdb-templates
      - name: config
        emptyDir: {}
      - name: healthz
        configMap:
          name: couchdb-healthz
      restartPolicy: Always
